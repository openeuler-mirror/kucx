# See https://aka.ms/yaml

trigger:
  - master
pr:
  - master

resources:
  containers:
    - container: centos7
      image: ucfconsort.azurecr.io/ucx/centos7:1
      endpoint: ucfconsort_registry
    - container: fedora
      image: ucfconsort.azurecr.io/ucx/fedora:1
      endpoint: ucfconsort_registry

stages:
  - stage: Build
    jobs:
      - job: latest_cc
        displayName: Latest CCs and CppCheck
        container: fedora
        steps:
          - bash: ./autogen.sh
            displayName: Setup autotools

          - bash: |
              set -eE

              mkdir build-gcc && cd build-gcc
              gcc --version
              # cscppc wraps gcc to use its output for cppcheck
              export PATH="`cscppc --print-path-to-wrap`:$PATH"
              ../contrib/configure-release
              make -j`nproc` 2>&1 | tee cc.log
            displayName: GCC

          - bash: |
              set -eE

              cd build-gcc
              cppcheck --version

              cppcheck_err="cppcheck.err"
              # use cs* tools to keep only UCX related issues
              cslinker --quiet cc.log \
                | csgrep --mode=json --path $(dirname $PWD) --strip-path-prefix $(dirname $PWD) \
                | csgrep --mode=json --invert-match --path 'conftest.c' \
                | csgrep --mode=grep --invert-match --event "internal warning" --prune-events=1 \
                > $cppcheck_err

                if [ -s $cppcheck_err ]; then
                  echo "CppCheck found errors:"
                  cat $cppcheck_err
                  exit 100
                fi

                echo "No errors reported by cppcheck"

            displayName: CppCheck

          - bash: |
              set -eE
              mkdir build-clang && cd build-clang
              clang --version
              ../contrib/configure-release CC=clang CXX=clang++
            displayName: Configure for Clang

          - bash: |
              set -eE
              cd build-clang
              make -j`nproc`
            displayName: Clang

      # Perform test builds on relevant distributions.
      - job: Distros
        displayName: Build for
        strategy:
          matrix:
            centos7:
              CONTAINER: centos7
              CONFIGURE_OPTS:
        container: $[ variables['CONTAINER'] ]
        steps:
          - bash: ./autogen.sh
            displayName: Setup autotools

          - bash: |
              set -eE
              mkdir build && cd build
              ../configure $(CONFIGURE_OPTS)
            displayName: Configure

          - bash: |
              set -eE
              cd build
              gcc -v
              make -s -j `nproc`
            displayName: Build for $(CONTAINER)
