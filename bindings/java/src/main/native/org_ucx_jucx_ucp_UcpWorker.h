/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class org_ucx_jucx_ucp_UcpWorker */

#ifndef _Included_org_ucx_jucx_ucp_UcpWorker
#define _Included_org_ucx_jucx_ucp_UcpWorker
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     org_ucx_jucx_ucp_UcpWorker
 * Method:    createWorkerNative
 * Signature: (Lorg/ucx/jucx/ucp/UcpWorkerParams;J)J
 */
JNIEXPORT jlong JNICALL Java_org_ucx_jucx_ucp_UcpWorker_createWorkerNative
  (JNIEnv *, jclass, jobject, jlong);

/*
 * Class:     org_ucx_jucx_ucp_UcpWorker
 * Method:    releaseWorkerNative
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_org_ucx_jucx_ucp_UcpWorker_releaseWorkerNative
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_ucx_jucx_ucp_UcpWorker
 * Method:    workerGetAddressNative
 * Signature: (J)Ljava/nio/ByteBuffer;
 */
JNIEXPORT jobject JNICALL Java_org_ucx_jucx_ucp_UcpWorker_workerGetAddressNative
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_ucx_jucx_ucp_UcpWorker
 * Method:    releaseAddressNative
 * Signature: (JLjava/nio/ByteBuffer;)V
 */
JNIEXPORT void JNICALL Java_org_ucx_jucx_ucp_UcpWorker_releaseAddressNative
  (JNIEnv *, jclass, jlong, jobject);

/*
 * Class:     org_ucx_jucx_ucp_UcpWorker
 * Method:    progressWorkerNative
 * Signature: (J)I
 */
JNIEXPORT jint JNICALL Java_org_ucx_jucx_ucp_UcpWorker_progressWorkerNative
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_ucx_jucx_ucp_UcpWorker
 * Method:    waitWorkerNative
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_org_ucx_jucx_ucp_UcpWorker_waitWorkerNative
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_ucx_jucx_ucp_UcpWorker
 * Method:    signalWorkerNative
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_org_ucx_jucx_ucp_UcpWorker_signalWorkerNative
  (JNIEnv *, jclass, jlong);

/*
 * Class:     org_ucx_jucx_ucp_UcpWorker
 * Method:    recvTaggedNonBlockingNative
 * Signature: (JLjava/nio/ByteBuffer;JJLorg/ucx/jucx/UcxCallback;)Lorg/ucx/jucx/UcxRequest;
 */
JNIEXPORT jobject JNICALL Java_org_ucx_jucx_ucp_UcpWorker_recvTaggedNonBlockingNative
  (JNIEnv *, jclass, jlong, jobject, jlong, jlong, jobject);

#ifdef __cplusplus
}
#endif
#endif
